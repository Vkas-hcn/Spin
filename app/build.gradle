plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'stringfog'
}
// 导入RandomKeyGenerator类，如果使用HardCodeKeyGenerator，更换下类名
import com.github.megatronking.stringfog.plugin.kg.RandomKeyGenerator
import com.github.megatronking.stringfog.plugin.StringFogMode
stringfog {
    // 必要：加解密库的实现类路径，需和上面配置的加解密算法库一致。
    implementation 'com.github.megatronking.stringfog.xor.StringFogImpl'
    // 可选：加密开关，默认开启。
    enable true
    // 可选（3.0版本新增）：指定密钥生成器，默认使用长度8的随机密钥（每个字符串均有不同随机密钥）,
    // 也可以指定一个固定的密钥：HardCodeKeyGenerator("This is a key")
    kg new RandomKeyGenerator()
    // 可选（4.0版本新增）：用于控制字符串加密后在字节码中的存在形式, 默认为base64，
    // 也可以使用text或者bytes
    mode StringFogMode.base64
}
android {
    compileSdk rootProject.ext.android.compileSdk

    defaultConfig {
        applicationId "com.spin.secure"
        minSdk rootProject.ext.android.minSdk
        targetSdk rootProject.ext.android.targetSdk
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
    }

    buildTypes {
        debug {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation rootProject.ext.dependencies.coreKtx
    implementation rootProject.ext.dependencies.fragmentKtx
    implementation rootProject.ext.dependencies.lifeCycleKtx
    implementation rootProject.ext.dependencies.liveDataKtx
    implementation rootProject.ext.dependencies.viewModelKtx
    implementation rootProject.ext.dependencies.appcompat
    implementation rootProject.ext.dependencies.material
    implementation rootProject.ext.dependencies.constraintlayout
    implementation rootProject.ext.dependencies.coroutines
    implementation rootProject.ext.dependencies.lottie
    implementation rootProject.ext.dependencies.materialDialogCore
    implementation rootProject.ext.dependencies.materialDialogLifecycle
//    implementation rootProject.ext.dependencies.materialDialogInput
    implementation rootProject.ext.dependencies.adapter
    implementation platform(rootProject.ext.dependencies.firebaseBom)
    implementation rootProject.ext.dependencies.firebaseConfigKtx
    implementation rootProject.ext.dependencies.admobAd
    implementation rootProject.ext.dependencies.moshi
    kapt rootProject.ext.dependencies.moshiCodegen
    implementation project(':ss')

    implementation "com.android.installreferrer:installreferrer:2.2"
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.github.xuexiangjys.XUtil:xutil-core:2.0.0'
    implementation("com.squareup.okhttp3:okhttp:4.8.0")
    implementation("com.squareup.okhttp3:logging-interceptor:4.8.0")
    implementation 'com.facebook.android:facebook-android-sdk:12.3.0'
    implementation 'com.github.megatronking.stringfog:xor:4.0.1'

}